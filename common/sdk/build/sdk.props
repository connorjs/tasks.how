<Project>
	<!--
	Custom properties.
	-->
	<PropertyGroup>
		<!-- Set VSTest `IsTestProject` property based on our naming convention (and use it for conditions, later). -->
		<IsTestProject>$(MSBuildProjectName.EndsWith('.Tests'))</IsTestProject>
	</PropertyGroup>
	<!--
	Register the `.globalconfig`.
	-->
	<ItemGroup>
		<GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)sdk.globalconfig" />
	</ItemGroup>
	<!--
	.NET target framework and related properties.
	-->
	<PropertyGroup>
		<TargetFramework Condition="$(TargetFramework) == ''">net10.0</TargetFramework>
		<SuppressNETCoreSdkPreviewMessage>true</SuppressNETCoreSdkPreviewMessage>
	</PropertyGroup>
	<!--
	Interceptors feature.
	-->
	<PropertyGroup>
		<!-- 1) Turn on the interceptors feature -->
		<Features>$(Features);InterceptorsPreview</Features>
		<!-- 2) Opt in to the generator’s interceptor namespace -->
		<InterceptorsNamespaces>$(InterceptorsNamespaces);Microsoft.Extensions.Validation.Generated</InterceptorsNamespaces>
	</PropertyGroup>
	<!--
	Enable documentation by default.
	-->
	<PropertyGroup Condition="$(GenerateDocumentationFile) == ''">
		<GenerateDocumentationFile>true</GenerateDocumentationFile>
	</PropertyGroup>
	<!--
	Reference-related properties
	-->
	<PropertyGroup>
		<DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>
		<ImplicitUsings>disable</ImplicitUsings>
	</PropertyGroup>
	<!--
	C# compiler options
	-->
	<PropertyGroup>
		<CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
		<Nullable>enable</Nullable>
		<Deterministic>true</Deterministic>
	</PropertyGroup>
	<!--
	Analyzers: Main configuration
	-->
	<PropertyGroup>
		<GenerateDocumentationFile>true</GenerateDocumentationFile>
		<AnalysisMode>Recommended</AnalysisMode>
		<AnalysisLevel>10.0</AnalysisLevel>
		<CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>
		<EnableNETAnalyzers>true</EnableNETAnalyzers>
		<EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
	</PropertyGroup>
	<!--
	Analyzers: C# compiler configuration
	-->
	<PropertyGroup>
		<!--
		1. Default all warns to errors (`TreatWarningsAsErrors`).
		2. Allow some warns back to warns (`WarningsNotAsErrors`). For example,
			 a new warning has appeared that broke the build and we need time to
			 fix it. These SHOULD include an issue link.
		3. Suppress some warns completely (`NoWarn`). For example, a warning
			 with which we disagree. These MUST include a comment explaining why.
		-->
		<TreatWarningsAsErrors>true</TreatWarningsAsErrors>
		<WarningsNotAsErrors />
		<NoWarn />
	</PropertyGroup>
	<!--
	Analyzers: Debug builds.
	-->
	<PropertyGroup Condition="'$(Configuration)' == 'Debug'">
		<!-- Turn off “warnings as errors” during debug builds to allow incremental fixes. -->
		<TreatWarningsAsErrors>false</TreatWarningsAsErrors>
	</PropertyGroup>
	<!--
	Analyzers: Test project overrides.
	-->
	<PropertyGroup Condition="$(IsTestProject) == 'true'">
		<!-- Disable these for test projects
		- SA0001, SA1600, CS1591: Documentation-related
		-->
		<NoWarn>SA0001,SA1600,CS1591,$(NoWarn)</NoWarn>
	</PropertyGroup>
	<!--
	Test-project only properties.
	-->
	<PropertyGroup Condition="$(IsTestProject) == 'true'">
		<!-- Empty for now. -->
	</PropertyGroup>
	<ItemGroup Condition="$(IsTestProject) == 'true'">
		<!-- Parallelize unit tests -->
		<AssemblyAttribute Include="Microsoft.VisualStudio.TestTools.UnitTesting.ParallelizeAttribute">
			<Scope>Microsoft.VisualStudio.TestTools.UnitTesting.ExecutionScope.MethodLevel</Scope>
			<Scope_IsLiteral>true</Scope_IsLiteral>
		</AssemblyAttribute>
	</ItemGroup>
	<!--
	CI-specific properties.
	-->
	<PropertyGroup Condition="'$(CI)' == 'true'">
		<ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
	</PropertyGroup>
</Project>
